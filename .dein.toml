[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'junegunn/fzf'
build = './install --all'
merged = 0

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'fzf'
hook_add = '''
nnoremap <Space>sb :<C-u>Buffers<CR>
nnoremap <Space>sx :<C-u>Commands<CR>
nnoremap <Space>sf :<C-u>GFiles<CR>
nnoremap <Space>sa :<C-u>Ag<CR>
nnoremap <Space>sr :History<CR>
nnoremap <Space>sgs :<C-u>GFiles?<CR>
'''

[[plugins]]
repo = 'roxma/nvim-yarp'

# vim8用
[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
nnoremap <Space>rb :QuickRun<CR>
'''

[[plugins]]
repo = 'StanAngeloff/php.vim'

[[plugins]]
repo = 'dart-lang/dart-vim-plugin'

[[plugins]]
repo = 'keith/swift.vim'

[[plugins]]
repo = 'zah/nim.vim'

[[plugins]]
repo = 'othree/html5.vim'

[[plugins]]
repo = 'vim-python/python-syntax'
hook_add = '''
let g:python_highlight_all = 1
'''

[[plugins]]
repo = 'leafgarland/typescript-vim'

[[plugins]]
repo = 'posva/vim-vue'

# [[plugins]]
# repo = 'ncm2/ncm2'
# hook_source = '''
# " enable ncm2 for all buffers
# autocmd BufEnter * call ncm2#enable_for_buffer()
# set completeopt=noinsert,menuone,noselect
# 
# au User Ncm2Plugin call ncm2#register_source({
#             \ 'name' : 'css',
#             \ 'priority': 9, 
#             \ 'subscope_enable': 1,
#             \ 'scope': ['css','scss'],
#             \ 'mark': 'css',
#             \ 'word_pattern': '[\w\-]+',
#             \ 'complete_pattern': ':\s*',
#             \ 'on_complete': ['ncm2#on_complete#omni', 'csscomplete#CompleteCSS'],
#             \ })
# 
# au User Ncm2Plugin call ncm2#register_source({
#             \ 'name' : 'html',
#             \ 'priority': 9, 
#             \ 'subscope_enable': 1,
#             \ 'scope': ['html'],
#             \ 'mark': 'html',
#             \ 'word_pattern': '[\w\-]+',
#             \ 'complete_pattern': '(<*|</*)',
#             \ 'on_complete': ['ncm2#on_complete#omni', 'htmlcomplete#CompleteTags'],
#             \ })
# 
# '''
# 
# [[plugins]]
# repo = 'ncm2/ncm2-bufword'
# 
# [[plugins]]
# repo = 'ncm2/ncm2-path'
#  
# [[plugins]]
# repo = 'ncm2/ncm2-github'
#  
# [[plugins]]
# repo = 'ncm2/ncm2-html-subscope'
# 
# [[plugins]]
# repo = 'ncm2/ncm2-markdown-subscope'

[[plugins]]
repo = 'neoclide/coc.nvim'
build = 'coc#util#install()'
hook_add = '''
" if hidden not set, TextEdit might fail.
set hidden

" Better display for messages
set cmdheight=2

" Smaller updatetime for CursorHold & CursorHoldI
set updatetime=300

" don't give |ins-completion-menu| messages.
set shortmess=aFc

" always show signcolumns
set signcolumn=yes

" Use <c-space> for trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use `[c` and `]c` to navigate diagnostics
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K for show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <space>rn <Plug>(coc-rename)

" Remap for format selected region
xmap <space>f  <Plug>(coc-format-selected)
nmap <space>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
xmap <space>a  <Plug>(coc-codeaction-selected)
nmap <space>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <space>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <space>qf  <Plug>(coc-fix-current)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Using CocList
" Show all diagnostics
nnoremap <silent> <space>d  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>
'''
 

# [[plugins]]
# repo = 'Shougo/neosnippet.vim'
# depends = ['neosnippet-snippets', 'context_filetype.vim']
# on_i = 1
# hook_source = '''
#   imap <C-k> <Plug>(neosnippet_expand_or_jump)
#   smap <C-k> <Plug>(neosnippet_expand_or_jump)
#   xmap <C-k> <Plug>(neosnippet_expand_target)
#   if has('conceal')
#     set conceallevel=2 concealcursor=niv
#   endif
# '''
# 
# [[plugins]]
# repo = 'Shougo/neosnippet-snippets'
# 
# [[plugins]]
# repo = 'Shougo/context_filetype.vim'
# 
# [[plugins]]
# repo = 'Shougo/deoplete.nvim'
# on_event = 'InsertCharPre'
# hook_add = '''
# let g:deoplete#enable_at_startup = 1
# let g:deoplete#auto_complete_delay = 0
# let g:deoplete#auto_complete_start_length = 1
# let g:deoplete#enable_camel_case = 0
# let g:deoplete#enable_ignore_case = 0
# let g:deoplete#enable_refresh_always = 1
# let g:deoplete#enable_smart_case = 1
# let g:deoplete#file#enable_buffer_path = 1
# let g:deoplete#max_list = 100
# '''
# hook_source = '''
#   let g:deoplete#enable_at_startup = 1
#   inoremap <expr><tab> pumvisible() ? "\<C-n>" :
#         \ neosnippet#expandable_or_jumpable() ?
#         \    "\<Plug>(neosnippet_expand_or_jump)" : "\<tab>"
# '''
# on_i = 1
# 
# [[plugins]]
# repo = 'autozimu/LanguageClient-neovim'
# rev = 'next'
# build = 'bash install.sh'
# hook_add = '''
# set hidden
# set signcolumn=yes
# 
# let g:LanguageClient_rootMarkers = {
#     \ 'python': ['nlpserver.py'],
# \ }
# 
# let g:LanguageClient_serverCommands = {
#     \ 'rust': ['~/.cargo/bin/rustup', 'run', 'stable', 'rls'],
#     \ 'javascript': ['/usr/local/bin/javascript-typescript-stdio'],
#     \ 'typescript': ['/usr/local/bin/javascript-typescript-stdio'],
#     \ 'javascript.jsx': ['tcp://127.0.0.1:2089'],
#     \ 'python': ['pyls'],
#     \ 'php': ['php', '~/.config/composer/vendor/bin/php-language-server.php'],
#     \ 'go': ['go-langserver', '-gocodecompletion'],
#     \ 'dart': ['dart_language_server'],
#     \ 'swift': ['sourcekit-lsp'],
#     \ 'nim': ['nimlsp'],
#     \ 'vue': ['vls'],
#     \ 'html': ['html-languageserver', '--stdio'],
#     \ 'css': [],
#     \ }
# 
# let g:LanguageClient_autoStart = 1
# let g:neosnippet#enable_complete_done = 1
# let g:LanguageClient_diagnosticsEnable=0
# let g:LanguageClient_hasSnippetsSupport = 0
# nnoremap <F5> :call LanguageClient_contextMenu()<CR>
# " Or map each action separately
# nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
# nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
# nnoremap <silent> <F2> :call LanguageClient#textDocument_rename()<CR>
# '''

# [[plugins]]
# repo = 'prabirshrestha/vim-lsp'
# hook_add = '''
# let g:lsp_signs_enabled = 0
# let g:lsp_diagnostics_echo_cursor = 0
# 
# let g:lsp_log_verbose = 1
# let g:lsp_log_file = expand('~/vim-lsp.log')
# 
#   if executable('pyls')
#     au User lsp_setup call lsp#register_server({
#           \ 'name': 'pyls',
#           \ 'cmd': {server_info->['pyls']},
#           \ 'whitelist': ['python'],
#           \ })
#   endif
#   if executable('go-langserver')
#     au User lsp_setup call lsp#register_server({
#         \ 'name': 'go-langserver',
#         \ 'cmd': {server_info->['go-langserver', '-gocodecompletion']},
#         \ 'whitelist': ['go'],
#         \ })
#    endif
#    if executable('javascript-typescript-stdio')
#     au User lsp_setup call lsp#register_server({
#         \ 'name': 'javascript-typescript-stdio',
#         \ 'cmd': {server_info->['/usr/local/bin/javascript-typescript-stdio']},
#         \ 'whitelist': ['javascript'],
#         \ })
#    endif
#     au User lsp_setup call lsp#register_server({
#         \ 'name': 'php-language-server',
#         \ 'cmd': {server_info->['php', expand('~/.config/composer/vendor/bin/php-language-server.php')]},
#         \ 'whitelist': ['php'],
#         \ })
# 
#    if executable('dart_language_server')
#     au User lsp_setup call lsp#register_server({
#         \ 'name': 'dart_language_server',
#         \ 'cmd': {server_info->['dart_language_server']},
#         \ 'whitelist': ['dart'],
#         \ })
#    endif
#    if executable('nimlsp')
#     au User lsp_setup call lsp#register_server({
#         \ 'name': 'nimlsp',
#         \ 'cmd': {server_info->['nimlsp']},
#         \ 'whitelist': ['nim'],
#         \ })
#    endif
# 
# 
# " Or map each action separately
# nnoremap <silent> K :LspHover<CR>
# nnoremap <silent> gd :LspDefinition<CR>
# 
# '''
# 
# [[plugins]]
# repo = 'prabirshrestha/async.vim'
# 
# [[plugins]]
# repo = 'prabirshrestha/asyncomplete.vim'
# hook_add = '''
# let g:asyncomplete_remove_duplicates = 1
# let g:asyncomplete_auto_popup = 1
# '''
# 
# [[plugins]]
# repo = 'prabirshrestha/asyncomplete-lsp.vim'

# [[plugins]]
# repo = 'prabirshrestha/asyncomplete-buffer.vim'
# hook_add = '''
#   au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#buffer#get_source_options({
#       \ 'name': 'buffer',
#       \ 'whitelist': ['*'],
#       \ 'completor': function('asyncomplete#sources#buffer#completor'),
#       \ }))
# '''

# [[plugins]]
# repo = 'prabirshrestha/asyncomplete-file.vim'
# hook_add = '''
#   au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#file#get_source_options({
#       \ 'name': 'file',
#       \ 'whitelist': ['*'],
#       \ 'completor': function('asyncomplete#sources#file#completor'),
#       \ }))
# '''


[[plugins]]
repo = 'yggdroot/indentline'

[[plugins]]
repo = 'elzr/vim-json'
if   = '''! has('kaoriya')'''

[[plugins]]
repo    = 'vim-airline/vim-airline'
depends = ['vim-airline-themes']
hook_add = '''
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'unique_tail_improved'
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'

[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugins]] # toml syntax
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
let g:NERDTreeShowHidden = 1
nnoremap <Space>ft :NERDTreeToggle<CR>
'''

[[plugins]]
repo = 'mhinz/vim-startify'

[[plugins]]
repo =  'evidens/vim-twig'

[[plugins]]
repo =  'w0ng/vim-hybrid'

[[plugins]]
repo = 'tpope/vim-markdown'
hook_add = '''
let g:vim_markdown_conceal = 0
'''

[[plugins]]
repo = 'previm/previm'
on_ft = 'markdown'
hook_add = '''
let g:previm_open_cmd = 'open -a Google\ Chrome'
'''

[[plugins]]
repo = 'altercation/vim-colors-solarized'

[[plugins]]
repo = 'majutsushi/tagbar.git'

[[plugins]]
repo = 'szw/vim-tags'
hook_add = '''
let g:tagbar_ctags_bin = '/usr/local/bin/ctags'

nnoremap <Space>tt :TagbarToggle<CR>
'''

[[plugins]]
repo = 'KeitaNakamura/neodark.vim'

[[plugins]]
repo = 'joshdick/onedark.vim'

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
nnoremap <Space>gs :Gstatus<CR>
nnoremap <Space>ge :Gedit<CR>
nnoremap <Space>gd :Gdiff<CR>
nnoremap <Space>gb :Gblame<CR>
nnoremap <Space>gp :Gpush
nnoremap <Space>gb :Gblame<CR>
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'simeji/winresizer'

[[plugins]]
repo = 'Shougo/echodoc.vim'
hook_add = '''
set noshowmode
set completeopt-=preview
let g:echodoc_enable_at_startup = 1
let g:echodoc_type = 'echo'
'''

[[plugins]]
repo = 'othree/yajs.vim'
on_ft = 'javascript'

[[plugins]]
repo = 'othree/es.next.syntax.vim'
on_ft = 'javascript'

[[plugins]]
repo = 'othree/javascript-libraries-syntax.vim'
on_ft = 'javascript'

[[plugins]]
repo = 'pangloss/vim-javascript'
on_ft = 'javascript'

[[plugins]]
repo = 'cohama/lexima.vim'

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
let g:ale_linters = {
    \ 'python': ['flake8'],
    \ }

" 各ツールをFixerとして登録
let g:ale_fixers = {
    \ 'python': ['autopep8', 'black', 'isort'],
    \ }

" Set this. Airline will handle the rest.
let g:airline#extensions#ale#enabled = 1
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
'''
