[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'junegunn/fzf'
build = './install --all'
merged = 0

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'fzf'
hook_add = '''
nnoremap <Space>sb :<C-u>Buffers<CR>
nnoremap <Space>sx :<C-u>Commands<CR>
nnoremap <Space>sf :<C-u>GFiles<CR>
nnoremap <Space>sa :<C-u>Ag<CR>
nnoremap <Space>sr :History<CR>
nnoremap <Space>sgs :<C-u>GFiles?<CR>
'''

[[plugins]]
repo = 'roxma/nvim-yarp'

# vim8用
[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
nnoremap <Space>rb :QuickRun<CR>
'''

[[plugins]]
repo = 'StanAngeloff/php.vim'

[[plugins]]
repo = 'dart-lang/dart-vim-plugin'

[[plugins]]
repo = 'keith/swift.vim'

[[plugins]]
repo = 'zah/nim.vim'

[[plugins]]
repo = 'othree/html5.vim'

[[plugins]]
repo = 'vim-python/python-syntax'
hook_add = '''
let g:python_highlight_all = 1
'''

[[plugins]]
repo = 'leafgarland/typescript-vim'

[[plugins]]
repo = 'posva/vim-vue'

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_i = 1
hook_source = '''
  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)
  xmap <C-k> <Plug>(neosnippet_expand_target)
  if has('conceal')
    set conceallevel=2 concealcursor=niv
  endif
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
if = 'has("nvim")'
hook_add = '''
let g:deoplete#enable_at_startup = 1
let g:deoplete#auto_complete_delay = 0
let g:deoplete#auto_complete_start_length = 1
let g:deoplete#enable_camel_case = 0
let g:deoplete#enable_ignore_case = 0
let g:deoplete#enable_refresh_always = 1
let g:deoplete#enable_smart_case = 1
let g:deoplete#file#enable_buffer_path = 1
let g:deoplete#max_list = 10000
'''
hook_source = '''
  let g:deoplete#enable_at_startup = 1
  inoremap <expr><tab> pumvisible() ? "\<C-n>" :
        \ neosnippet#expandable_or_jumpable() ?
        \    "\<Plug>(neosnippet_expand_or_jump)" : "\<tab>"


    call deoplete#custom#source('LanguageClient',
            \ 'min_pattern_length',
            \ 1)
    call deoplete#custom#source('LanguageClient',
            \ 'rank',
            \ 1000)
'''

[[plugins]]
repo = 'tbodt/deoplete-tabnine'
build = './install.sh'

[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
rev = 'next'
build = 'bash install.sh'
depends = ['deoplete.vim']
hook_add = '''
set hidden
set signcolumn=yes

let g:LanguageClient_serverCommands = {
    \ 'rust': ['~/.cargo/bin/rustup', 'run', 'stable', 'rls'],
    \ 'javascript': ['/usr/local/bin/javascript-typescript-stdio'],
    \ 'typescript': ['/usr/local/bin/javascript-typescript-stdio'],
    \ 'javascript.jsx': ['tcp://127.0.0.1:2089'],
    \ 'python': ['/Users/takuma/.pyenv/shims/pyls'],
    \ 'php': ['php', '~/.config/composer/vendor/bin/php-language-server.php'],
    \ 'go': ['go-langserver', '-gocodecompletion'],
    \ 'dart': ['dart_language_server'],
    \ 'swift': ['sourcekit-lsp'],
    \ 'nim': ['nimlsp'],
    \ 'vue': ['vls'],
    \ 'html': ['html-languageserver', '--stdio'],
    \ 'css': [],
    \ }

let g:LanguageClient_autoStart = 1
nnoremap <F5> :call LanguageClient_contextMenu()<CR>
" Or map each action separately
nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
nnoremap <silent> <F2> :call LanguageClient#textDocument_rename()<CR>
'''


[[plugins]]
repo = 'yggdroot/indentline'

[[plugins]]
repo = 'elzr/vim-json'
if   = '''! has('kaoriya')'''

[[plugins]]
repo    = 'vim-airline/vim-airline'
depends = ['vim-airline-themes']
hook_add = '''
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'unique_tail_improved'
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'

[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugins]] # toml syntax
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
let g:NERDTreeShowHidden = 1
nnoremap <Space>ft :NERDTreeToggle<CR>
'''

[[plugins]]
repo = 'mhinz/vim-startify'

[[plugins]]
repo =  'evidens/vim-twig'

[[plugins]]
repo =  'w0ng/vim-hybrid'

[[plugins]]
repo = 'tpope/vim-markdown'
hook_add = '''
let g:vim_markdown_conceal = 0
'''

[[plugins]]
repo = 'previm/previm'
on_ft = 'markdown'
hook_add = '''
let g:previm_open_cmd = 'open -a Google\ Chrome'
'''

[[plugins]]
repo = 'altercation/vim-colors-solarized'

[[plugins]]
repo = 'majutsushi/tagbar.git'

[[plugins]]
repo = 'szw/vim-tags'
hook_add = '''
let g:tagbar_ctags_bin = '/usr/local/bin/ctags'

nnoremap <Space>tt :TagbarToggle<CR>
'''

[[plugins]]
repo = 'KeitaNakamura/neodark.vim'

[[plugins]]
repo = 'joshdick/onedark.vim'

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
nnoremap <Space>gs :Gstatus<CR>
nnoremap <Space>ge :Gedit<CR>
nnoremap <Space>gd :Gdiff<CR>
nnoremap <Space>gb :Gblame<CR>
nnoremap <Space>gp :Gpush
nnoremap <Space>gb :Gblame<CR>
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'simeji/winresizer'

[[plugins]]
repo = 'Shougo/echodoc.vim'
hook_add = '''
set noshowmode
let g:echodoc_enable_at_startup = 1
let g:echodoc_type = 'echo'
'''

[[plugins]]
repo = 'othree/yajs.vim'
on_ft = 'javascript'

[[plugins]]
repo = 'othree/es.next.syntax.vim'
on_ft = 'javascript'

[[plugins]]
repo = 'othree/javascript-libraries-syntax.vim'
on_ft = 'javascript'

[[plugins]]
repo = 'pangloss/vim-javascript'
on_ft = 'javascript'

[[plugins]]
repo = 'cohama/lexima.vim'

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
let g:ale_linters = {
    \ 'python': ['pyls'],
    \ }

" 各ツールをFixerとして登録
let g:ale_fixers = {
    \ 'python': ['pyls'],
    \ }
'''
