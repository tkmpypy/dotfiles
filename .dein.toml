[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'prabirshrestha/async.vim'


[[plugins]]
repo = 'junegunn/fzf'
build = './install --all'
merged = 0

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'fzf'
hook_add = '''
nnoremap <Space>sb :<C-u>Buffers<CR>
nnoremap <Space>sx :<C-u>Commands<CR>
nnoremap <Space>sf :<C-u>GFiles<CR>
nnoremap <Space>sa :<C-u>Ag<CR>
nnoremap <Space>sr :History<CR>
nnoremap <Space>sgs :<C-u>GFiles?<CR>
'''

[[plugins]]
repo = 'Shougo/neocomplete.vim'
if = 'has("lua")'
on_i = 1

# vim8用
[[plugins]]
repo = 'roxma/nvim-yarp'
if = "!has('nvim')"

# vim8用
[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'
if = "!has('nvim')"

[[plugins]]
repo = 'dart-lang/dart-vim-plugin'

[[plugins]]
repo = 'keith/swift.vim'

[[plugins]]
repo = 'zah/nim.vim'

[[plugins]]
repo = 'othree/html5.vim'

#[[plugins]]
#repo = 'Shougo/deoplete.nvim'
#if = 'has("nvim")'
#hook_add = '''
#let g:deoplete#enable_at_startup = 1
#let g:deoplete#auto_complete_delay = 0
#let g:deoplete#auto_complete_start_length = 1
#let g:deoplete#enable_camel_case = 0
#let g:deoplete#enable_ignore_case = 0
#let g:deoplete#enable_refresh_always = 0
#let g:deoplete#enable_smart_case = 1
#let g:deoplete#omni#input_patterns = get(g:,'deoplete#omni#input_patterns',{})
#let g:deoplete#omni#functions = get(g:,'deoplete#omni#functions',{})
#
#let g:python3_host_prog = '/Users/takuma/.pyenv/shims/python3'
#let g:python_host_prog = '/Users/takuma/.pyenv/shims/python'
#'''


[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'

[[plugins]]
repo = 'prabirshrestha/asyncomplete-buffer.vim'
hook_source = '''
  au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#buffer#get_source_options({
      \ 'name': 'buffer',
      \ 'whitelist': ['*'],
      \ 'completor': function('asyncomplete#sources#buffer#completor'),
      \ }))
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete-file.vim'
hook_source = '''
  au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#file#get_source_options({
      \ 'name': 'file',
      \ 'whitelist': ['*'],
      \ 'completor': function('asyncomplete#sources#file#completor'),
      \ }))
'''

[[plugins]]
repo = 'Shougo/neosnippet'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'delphinus35/typescript-vim'
rev  = 'colorize-template-strings'

[[pulugins]]
repo = 'Shougo/neoinclude.vim'

[[plugins]]
repo = 'yggdroot/indentline'

[[plugins]]
repo = 'elzr/vim-json'
if   = '''! has('kaoriya')'''

[[plugins]]
repo    = 'vim-airline/vim-airline'
depends = ['vim-airline-themes']

[[plugins]]
repo = 'vim-airline/vim-airline-themes'
hook_source = '''
let g:airline_theme = 'onedark'
'''

[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugins]] # toml syntax
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
let g:NERDTreeShowHidden = 1
nnoremap <Space>ft :NERDTreeToggle<CR>
'''

[[plugins]]
repo = 'mhinz/vim-startify'

[[plugins]]
repo =  'evidens/vim-twig'

[[plugins]]
repo =  'w0ng/vim-hybrid'

[[plugins]]
repo = 'tpope/vim-markdown'
hook_add = '''
let g:vim_markdown_conceal = 0
'''

[[plugins]]
repo = 'previm/previm'
on_ft = 'markdown'
hook_add = '''
let g:previm_open_cmd = 'open -a Google\ Chrome'
'''

[[plugins]]
repo = 'altercation/vim-colors-solarized'

[[plugins]]
repo = 'majutsushi/tagbar.git'

[[plugins]]
repo = 'szw/vim-tags'
hook_add = '''
let g:tagbar_ctags_bin = '/usr/local/bin/ctags'

nnoremap <Space>tt :TagbarToggle<CR>
'''

[[plugins]]
repo = 'KeitaNakamura/neodark.vim'

[[plugins]]
repo = 'joshdick/onedark.vim'

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
nnoremap <Space>gs :Gstatus<CR>
nnoremap <Space>ge :Gedit<CR>
nnoremap <Space>gd :Gdiff<CR>
nnoremap <Space>gb :Gblame<CR>
nnoremap <Space>gp :Gpush
nnoremap <Space>gb :Gblame<CR>
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'simeji/winresizer'

#[[plugins]]
#repo = 'autozimu/LanguageClient-neovim'
#rev = 'next'
#build = 'bash install.sh'
#depends = ['deoplete.vim']
#hook_add = '''
#set hidden
#set signcolumn=yes
#
#let g:LanguageClient_serverCommands = {
#    \ 'rust': ['~/.cargo/bin/rustup', 'run', 'stable', 'rls'],
#    \ 'javascript': ['/usr/local/bin/javascript-typescript-stdio'],
#    \ 'javascript.jsx': ['tcp://127.0.0.1:2089'],
#    \ 'python': ['~/.pyenv/versions/3.5.1/bin/pyls'],
#    \ 'php': ['php', '~/.config/composer/vendor/bin/php-language-server.php'],
#    \ 'go': ['go-langserver', '-gocodecompletion'],
#    \ 'dart': ['dart_language_server'],
#    \ 'swift': ['sourcekit-lsp'],
#    \ 'nim': ['nimlsp'],
#    \ }
#
#let g:LanguageClient_autoStart = 1
#nnoremap <F5> :call LanguageClient_contextMenu()<CR>
#" Or map each action separately
#nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
#nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
#nnoremap <silent> <F2> :call LanguageClient#textDocument_rename()<CR>
#'''

[[plugins]]
repo = 'natebosch/vim-lsc'
hook_source = '''
let g:lsc_server_commands = {
    \ 'javascript': '/usr/local/bin/javascript-typescript-stdio',
    \ 'javascript.jsx': 'tcp://127.0.0.1:2089',
    \ 'python': {'command': '~/.pyenv/versions/3.5.1/bin/pyls', 'suppress_stderr': v:true},
    \ 'php': {'command': 'php ~/.config/composer/vendor/bin/php-language-server.php', 'suppress_stderr': v:true},
    \ 'go': {'command': 'go-langserver -gocodecompletion', 'suppress_stderr': v:true},
    \ 'dart': 'dart_language_server',
    \ 'swift': 'sourcekit-lsp',
    \ 'nim': 'nimlsp',
\ }

let g:lsc_auto_map = {
    \ 'GoToDefinition': '<silent> gd',
    \ 'FindReferences': '<silent> gr',
    \ 'NextReference': '<C-n>',
    \ 'PreviousReference': '<C-p>',
    \ 'FindImplementations': 'gI',
    \ 'FindCodeActions': 'ga',
    \ 'DocumentSymbol': 'go',
    \ 'WorkspaceSymbol': 'gS',
    \ 'ShowHover': 'v:true',
    \ 'SignatureHelp': '<C-m>',
\ }
'''

#[[plugins]]
#repo = 'prabirshrestha/vim-lsp'
#hook_add = '''
#  if executable('pyls')
#    au User lsp_setup call lsp#register_server({
#          \ 'name': 'pyls',
#          \ 'cmd': {server_info->['pyls']},
#          \ 'whitelist': ['python'],
#          \ })
#  endif
#  if executable('go-langserver')
#    au User lsp_setup call lsp#register_server({
#        \ 'name': 'go-langserver',
#        \ 'cmd': {server_info->['go-langserver', '-gocodecompletion']},
#        \ 'whitelist': ['go'],
#        \ })
#   endif
#   if executable('javascript-typescript-stdio')
#    au User lsp_setup call lsp#register_server({
#        \ 'name': 'javascript-typescript-stdio',
#        \ 'cmd': {server_info->['/usr/local/bin/javascript-typescript-stdio']},
#        \ 'whitelist': ['javascript'],
#        \ })
#   endif
#   if executable('php-language-server')
#    au User lsp_setup call lsp#register_server({
#        \ 'name': 'php-language-server',
#        \ 'cmd': {server_info->['php', expand('~/.config/composer/vendor/bin/php-language-server.php')]},
#        \ 'whitelist': ['php'],
#        \ })
#   endif
#   if executable('dart_language_server')
#    au User lsp_setup call lsp#register_server({
#        \ 'name': 'dart_language_server',
#        \ 'cmd': {server_info->['dart_language_server']},
#        \ 'whitelist': ['dart'],
#        \ })
#   endif
#   if executable('nimlsp')
#    au User lsp_setup call lsp#register_server({
#        \ 'name': 'nimlsp',
#        \ 'cmd': {server_info->['nimlsp']},
#        \ 'whitelist': ['nim'],
#        \ })
#   endif
#
#
#" Or map each action separately
#nnoremap <silent> K :LspHover<CR>
#nnoremap <silent> gd :LspDefinition<CR>
#'''

[[plugins]]
repo = 'Shougo/echodoc.vim'
hook_add = '''
set noshowmode
let g:echodoc_enable_at_startup = 1
let g:echodoc_type = 'echo'
'''

[[plugins]]
repo = 'othree/yajs.vim'
on_ft = 'javascript'

[[plugins]]
repo = 'othree/es.next.syntax.vim'
on_ft = 'javascript'

[[plugins]]
repo = 'othree/javascript-libraries-syntax.vim'
on_ft = 'javascript'

[[plugins]]
repo = 'pangloss/vim-javascript'
on_ft = 'javascript'

[[plugins]]
repo = 'cohama/lexima.vim'

[[plugins]]
repo = 'w0rp/ale'
