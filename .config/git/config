[core]
    editor = nvim
    pager = delta
    ignorecase = false

[user]
	name = tkmpypy
    email = tkmpypy@gmail.com
[alias]

  ##
  # One letter alias for our most frequent commands.
  #
  # Guidelines: these aliases do not use options, because we want
  # these aliases to be easy to compose and use in many ways.
  ##

  a = add
  b = branch
  c = commit
  d = diff
  f = fetch
  g = grep
  l = log
  m = merge
  o = checkout
  p = pull
  r = remote
  s = status
  sw = switch
  w = whatchanged

  ##
  # Short aliases for our frequent commands.
  #
  ##

  ### add ###

  # add all
  aa = add --all

  # add by patch - looks at each change, and asks if we want to put it in the repo.
  ap = add --patch

  # add just the files that are updated.
  au = add --update

  ### branch ###

  # branch and only list branches whose tips are reachable from the specified commit (HEAD if not specified).
  bm = branch --merged

  # branch and only list branches whose tips are not reachable from the specified commit (HEAD if not specified).
  bnm = branch --no-merged

  # branch with edit description
  bed = branch --edit-description

  # branch with show description; ideally git will add this feature in the future as `git --show-description`
  bsd = "!f(){ \
    branch=\"${1:-$(git rev-parse --abbrev-ref HEAD 2>/dev/null)}\";  \
    git config \"branch.$branch.description\"; \
  };f"

  ### commit ###

  # commit - amend the tip of the current branch rather than creating a new commit.
  ca = commit --amend

  # commit - amend the tip of the current branch, and edit the message.
  cam = commit --amend --message

  # commit - amend the tip of the current branch, and do not edit the message.
  cane = commit --amend --no-edit

  # commit interactive
  ci = commit --interactive

  # commit with a message
  cm = commit --message

  ### checkout ###

  # checkout - update the working tree to match a branch or paths. [same as "o" for "out"]
  co = checkout
  con = checkout --no-guess

  ### cherry-pick ###

  # cherry-pick - apply the changes introduced by some existing commits; useful for moving small chunks of code between branches.
  cp = cherry-pick

  # cherry-pick - abort the picking process
  cpa = cherry-pick --abort

  # cherry-pick - continue the picking process
  cpc = cherry-pick --continue

  # cherry-pick without making a commit, and when when recording the commit, append a line that says "(cherry picked from commit ...)"
  cp-nx = cherry-pick --no-commit -x

  ### diff ###

  # diff - show changes not yet staged
  dc = diff --cached

  # diff - show changes about to be commited
  ds = diff --staged

  # diff - show changes but by word, not line
  dw = diff --word-diff

  # diff deep - show changes with our preferred options. Also aliased as `diff-deep`.
  dd = diff --check --dirstat --find-copies --find-renames --histogram --color

  ### clean ###

  # clean everything to be pristine
  cleanest = clean -ffdx

  ### grep ###

  # grep i.e. search for text
  g = grep

  # grep - show line number
  gl = grep --line-number

  # grep group - search with our preferred options. Also aliased as `grep-group`.
  gg = grep --break --heading --line-number --color

  ### log ###

  # log with a text-based graphical representation of the commit history.
  lg = log --graph

  # log with one line per item.
  lo = log --oneline

  # log with patch generation.
  lp = log --patch

  # log with first parent, useful for team branch that only accepts pull requests
  lfp = log --first-parent

  # log with items appearing in topological order, i.e. descendant commits are shown before their parents.
  lt = log --topo-order

  # log like - we like this summarization our key performance indicators. Also aliased as `log-like`.
  ll = log --graph --topo-order --date=short --abbrev-commit --decorate --all --boundary --pretty=format:'%Cgreen%ad %Cred%h%Creset -%C(yellow)%d%Creset %s %Cblue[%cn]%Creset %Cblue%G?%Creset'

  # log like long  - we like this summarization our key performance indicators. Also aliased as `log-like-long`.
  lll = log --graph --topo-order --date=iso8601-strict --no-abbrev-commit --abbrev=40 --decorate --all --boundary --pretty=format:'%Cgreen%ad %Cred%h%Creset -%C(yellow)%d%Creset %s %Cblue[%cn <%ce>]%Creset %Cblue%G?%Creset'

  ## ls-files ##

  # ls-files - show information about files in the index and the working tree; like Unix "ls" command.
  ls = ls-files

  # ls-ignored -  list files that git has ignored.
  ls-ignored = ls-files --others --i --exclude-standard

  ### merge ###

  # merge abort - cancel the merging process
  ma = merge --abort

  # merge - continue the merging process
  mc = merge --continue

  # merge but without autocommit, and with a commit even if the merge resolved as a fast-forward.
  me = merge --no-commit --no-ff

  ### pull ###

  # pull if a merge can be resolved as a fast-forward, otherwise fail.
  pf = pull --ff-only

  # pull with rebase - to provide a cleaner, linear, bisectable history.
  #
  # To automatically do "pull --rebase" everywhere:
  #
  #     git config --global pull.rebase true
  #
  # To automatically do "pull --rebase" for any branch based on 
  # the branch "main":
  #
  #    git config branch.main.rebase true
  #
  # To automatically do "pull --rebase" for any newly-created branches:
  #
  #     git config --global branch.autosetuprebase always
  #
  # To integrate changes between branches, you can merge or rebase.
  #
  # When we use "git pull", git does a fetch then a merge.
  #
  # If we've made changes locally and someone else has pushed changes
  # to our git host then git will automatically merge these together
  # and create a merge commit that looks like this in the history:
  #
  #    12345678 - Merge branch 'foo' of bar into main
  #
  # When we use "git pull --rebase", git does a fetch then a rebase.
  # A rebase resets the HEAD of your local branch to be the same as
  # the remote HEAD, then replays your local commits back into repo.
  # This means you don't get any noisy merge messages in your history.
  # This gives us a linear history, and also helps with git bisect.
  #
  pr = pull --rebase

  # pp - pull with rebase preserve of merge commits
  #
  # See https://stackoverflow.com/questions/21364636/git-pull-rebase-preserve-merges
  #
  # You should only rebase if you know (in a sort of general sense)
  # what you are doing, and if you do know what you are doing, then you
  # would probably prefer a merge-preserving rebase as a general rule.
  #
  # Although by the time you've decided that rebasing is a good idea,
  # you will probably find that a history that has its own embedded
  # branch-and-merge-points is not necessarily the correct "final
  # rewritten history".
  #
  # That is, if it's appropriate to do a rebase at all, it's at least fairly
  # likely that the history to be rebased is itself linear, so that the
  # preserve-vs-flatten question is moot anyway.
  #
  # See https://stackoverflow.com/questions/38269092/is-it-possible-to-put-preserve-merges-in-the-gitconfig
  #
  # While preserving merges is probably generally superior, in at least a
  # few ways, to discarding them when rebasing, the fact is that rebase
  # cannot preserve them. The only thing it can do, once some commits
  # have been copied to new commits, is re-perform them. This can have new
  # and/or different merge conflicts, vs the last time the merge was done.
  # You should also pay close attention to the restrictions on merge
  # preservation in the git rebase documentation.
  #
  # Without getting into a lot of detail, it always seems to me that most
  # commit graph subsets that "should be" rebased, rarely have any
  # internal merges. If such a graph subset has a single final merge, you
  # can simply strip away that merge (with git reset) before rebasing,
  # and re-do that single merge manually at the end. (In fact, git rebase
  # normally drops merge commits entirely, so you don't have to run the git
  # reset itself in some cases. The one where you do have to run it is when
  # the merge is into the branch onto which you intend to rebase. This is
  # where git pull actually does the right thing when it uses
  # `git rebase -p`, except that it fails to check for, and warn about,
  # internal merges, which are sort of warning signs that rebasing might
  # not be a good idea.
  #
  pp = pull --rebase=preserve

  ### rebase ###

  # rebase - forward-port local commits to the updated upstream head.
  rb = rebase

  # rebase abort - cancel the rebasing process
  rba = rebase --abort

  # rebase - continue the rebasing process after resolving a conflict manually and updating the index with the resolution.
  rbc = rebase --continue

  # rebase - restart the rebasing process by skipping the current patch.
  rbs = rebase --skip

  # rbi - rebase interactive on our unpushed commits.
  #
  # Before we push our local changes, we may want to do some cleanup,
  # to improve our commit messages or squash related commits together.
  #
  # Let's say I've pushed two commits that are related to a new feature and
  # I have another where I made a spelling mistake in the commit message.
  # When I run "git rbi" I get dropped into my editor with this:
  #
  #     pick 7f06d36 foo
  #     pick ad544d0 goo
  #     pick de3083a hoo
  #
  # Let's say I want to squash the "foo" and "goo" commits together,
  # and also change "hoo" to say "whatever". To do these, I change "pick"
  # to say "s" for squash; this tells git to squash the two together;
  # I also edit "hoo" to rename it to "whatever". I make the file look like:
  #
  #     pick 7f06d36 foo
  #     s ad544d0 goo
  #     r de3083a whatever
  #
  # This gives me two new commit messages to edit, which I update.
  # Now when I push the remote repo host receives two commits
  #
  #     3400455 - foo
  #     5dae0a0 - whatever
  #
  rbi = rebase --interactive @{upstream}

  ### reflog ###

  # reflog - reference log that manages when tips of branches are updated.
  rl = reflog

  ### remote ###

  # remote - manage set of tracked repositories [same as "r"].
  rr = remote

  # remote show - gives some information about the remote <name>.
  rrs = remote show

  # remote update - fetch updates for a named set of remotes in the repository as defined by remotes.
  rru = remote update

  # remote prune - deletes all stale remote-tracking branches under <name>.
  rrp = remote prune

  incoming = !git remote update --prune; git log ..@{upstream}
  outgoing = log @{upstream}..

  ### revert ###

  # revert - undo the changes from some existing commits
  rv = revert

  # revert without autocommit; useful when you're reverting more than one commits' effect to your index in a row.
  rvnc = revert --no-commit

  ### show-branch ###

  # show-branch - print a list of branches and their commits.
  sb = show-branch

  ### submodule ###

  # submodule - enables foreign repositories to be embedded within a dedicated subdirectory of the source tree.
  sm = submodule

  # submodule init
  smi = submodule init

  # submodule add
  sma = submodule add

  # submodule sync
  sms = submodule sync

  # submodule update
  smu = submodule update

  # submodule update with initialize
  smui = submodule update --init

  # submodule update with initialize and recursive; this is useful to bring a submodule fully up to date.
  smuir = submodule update --init --recursive

  ### status ###

  # status with short format instead of full details
  ss = status --short

  # status with short format and showing branch and tracking info.
  ssb = status --short --branch

  ### Switch ###
  swm = switch main
  swms = switch master
  swc = switch -c

[init]
	defaultBranch = main
[protocol "file"]
    allow = always


